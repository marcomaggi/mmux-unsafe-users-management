\input texinfo.tex
@c %**start of header
@setfilename mmux-unsafe-users-management.info
@settitle MMUX Unsafe Users Management
@c %**end of header

@include version.texi
@include macros.texi

@c page
@c ------------------------------------------------------------
@c Values.
@c ------------------------------------------------------------

@set TITLE                      MMUX Unsafe Users Management

@c To be used as @value{PACKAGE} whenever we need to include the full
@c name of this package.
@set PACKAGE                    MMUX Unsafe Users Management

@c To be used as @value{PACKAGE} whenever we need to include the
@c nickname of the project: the name that is used to compose the
@c distribution tarball or the web address.
@set PACKAGE_NICKNAME           mmux-unsafe-users-management

@c To be used as @value{AUTHOR} whenever we need to include the list of
@c authors of this document.
@set AUTHOR                     Marco Maggi

@c To be used as @value{AUTHOR_EMAIL} whenever we need to include the
@c email of the *single* author of this document.
@set AUTHOR_EMAIL               @email{mrc.mgg@@gmail.com}

@c To be used as @value{COPYRIGHT_YEARS} whenever we need to include the
@c list of copyright years.
@set COPYRIGHT_YEARS            2014, 2018, 2020

@c ------------------------------------------------------------

@set GITHUB_URL                 @url{http://github.com/marcomaggi/mmux-unsafe-users-management}
@set DOCUMENTATION_URL          @url{http://marcomaggi.github.com/docs/mmux-unsafe-users-management.html}

@c ------------------------------------------------------------

@set MANAGER_SCRIPT             mmux-unsafe-users-manager
@set MANAGER_SCRIPT_COMMAND     @command{mmux-unsafe-users-manager}
@set UNSAFE_USERS_DOTFILE       @file{~/.mmux-unsafe-users}

@set REQUIRED_MBFL_VERSION      v3.0.0-devel.4

@c page
@c ------------------------------------------------------------
@c Copyright notice.
@c ------------------------------------------------------------

@copying
This document describes version @version{} of @value{PACKAGE}, a distribution of @gnu{} Bash
scripts; it proposes a model to manage unsafe user profiles associated to safe user accounts on
Slackware @gnu{}+Linux systems.  This package depends upon the external package Marco's Bash
Functions Library (@mbfl{}), at least version @value{REQUIRED_MBFL_VERSION}.

The package is distributed under the terms of the @gnu{} General Public License (@gpl{}).

@noindent
Copyright @copyright{} @value{COPYRIGHT_YEARS} by @value{AUTHOR} @value{AUTHOR_EMAIL}

@quotation
Permission is granted to copy, distribute and/or modify this document under the terms of the @gnu{}
Free Documentation License, Version 1.3 or any later version published by the Free Software
Foundation; with Invariant Sections being ``@gnu{} Free Documentation License'' and ``@gnu{} General
Public License'', no Front--Cover Texts, and no Back--Cover Texts.  A copy of the license is
included in the section entitled ``@gnu{} Free Documentation License''.
@end quotation
@end copying

@c page
@c ------------------------------------------------------------
@c Headers.
@c ------------------------------------------------------------

@titlepage
@title @value{TITLE}
@subtitle Revision @version{}
@author @value{AUTHOR} @value{AUTHOR_EMAIL}
@page
@vskip 0pt plus 1filll
@insertcopying
@end titlepage

@c ------------------------------------------------------------

@ifinfo
@dircategory Development
@direntry
* mmux-unsafe-users-management: (mmux-unsafe-users-management). @value{TITLE}.
@end direntry
@end ifinfo

@c ------------------------------------------------------------

@ignore
@syncodeindex tp cp
@syncodeindex vr cp
@syncodeindex fn cp
@end ignore

@c page
@ifnottex
@node Top
@top @value{TITLE}

@insertcopying

@menu
* overview::                    Overview of the package.
* prerequisites::               Prerequisites to use the package.
* using::                       How to use the package.
* tips::                        Useful stuff to know.
* script::                      The command line utility that does it all.
* normalisation::               Directories normalisation.
* model::                       How unsafe users are associated to safe ones.

Appendices

* Package License::             GNU General Public License.
* Documentation License::       GNU Free Documentation License.
* references::                  Bibliography and references.

Indexes

* concept index::               An entry for each concept.
@end menu
@end ifnottex

@c page
@node overview
@chapter Overview of the package


This document describes version @version{} of @value{PACKAGE}, a distribution of @gnu{} Bash
scripts; it proposes a model to manage unsafe user profiles associated to safe user accounts on
Slackware @gnu{}+Linux systems.  This package depends upon the external package Marco's Bash
Functions Library (@mbfl{}), at least version @value{REQUIRED_MBFL_VERSION}.

@c page
@node prerequisites
@chapter Prerequisites to use the package


To use this package, the following system requirements must be satisfied:

@itemize
@item
This package is meant to be used on computers for personal use, on which only trusted users have
accounts.  It introduces a security layer to run applications under restricted privileges, with the
purpose of partially protect legitimate users from remote attacks.

@item
The system administrator is expected to add the groups @code{mmux-safe-usrs} and
@code{mmux-unsafe-usrs}, for example using the commands:

@example
/usr/sbin/groupadd --force mmux-safe-usrs
/usr/sbin/groupadd --force mmux-unsafe-usrs
@end example

@noindent
the group @code{mmux-safe-usrs} is for safe users allowed to create unsafe users;
@code{mmux-unsafe-usrs} is for unsafe users, but safe users belonging to @code{mmux-safe-usrs} must
also belong to it (to be able to access directories whose group is @code{mmux-unsafe-usrs}).

This package does @strong{not} add users to the groups @code{mmux-safe-usrs} and
@code{mmux-unsafe-usrs}; it is responsibility of the system administrator to do it, for example with
the command:

@example
/usr/sbin/usermod marco --append --groups @code{mmux-safe-usrs},@code{mmux-unsafe-usrs}
@end example

@item
This package relies on the program @command{sudo} to allow unsafe users creation to the users of the
group @code{mmux-safe-usrs}; such policy is configured by the file:

@center @file{/etc/sudoers.d/mmux-unsafe-users-management.conf}

@noindent
which is installed on the system by this package: do not blindly accept this configuration file!
Take a good look at it and make the necessary changes for your host.

Remember that such sudoers file must be installed on the system with octal access permissions
@samp{0400}; the installation directory @file{/etc/sudoers.d} must have octal access permissions
@samp{0700}.  Such permissions @strong{cannot} be enforced by the installation infrastructure of
this package.

To enable loading of sudoers configuration modules: we have to include the following line in the
file @file{/etc/sudoers}:

@example
#includedir /etc/sudoers.d
@end example

@item
This package's distribution comes with a script @file{meta/slackware/doinst.sh} that can be run to
create the user groups and adjust the access permissions of the installed files.  It is usable, in
fact, as Slackware package installation script.
@end itemize

With this system configuration, users that are members of the group @code{mmux-safe-usrs} can:
add and remove multiple unsafe users accounts associated to a safe user; enable unsafe users to use
a X Window server running under the safe user's permissions.

@c page
@node using
@chapter How to use the package


The package @value{PACKAGE} installs the following scripts with access permissions @code{0755}:

@example
/etc/mmux/xinitrc.d/mmux-unsafe-users-management.sh
@end example

Every user that intends to use the facilities should add appropriate shell commands in its home
directory files:

@table @file
@item ~/.xinitrc
Should contain:

@example
for mmux_xinitrc_script in /etc/mmux/xinitrc.d/*.sh
do
  if test -x "$mmux_xinitrc_script"
  then "$mmux_xinitrc_script"
  fi
done
unset mmux_xinitrc_script
@end example
@end table

Let's say the user @samp{marco} wants to make use of unsafe user accounts to run applications; the
system administrator adds it to the group @code{mmux-safe-usrs}, for example with the command:

@example
/usr/sbin/usermod marco --append --groups @code{mmux-safe-usrs},@code{mmux-unsafe-usrs}
@end example

If @samp{marco} wants to create the unsafe users accounts @samp{marco-firefox} and
@samp{marco-banking}; he has to issue the commands:

@example
@value{MANAGER_SCRIPT} add marco-firefox -Smarco
@value{MANAGER_SCRIPT} add marco-banking -Smarco
@end example

@noindent
then create a file @value{UNSAFE_USERS_DOTFILE} holding the lines:

@example
marco-firefox
marco-banking
@end example

@noindent
finally log out and log back in.  Now he should be able to check the unsafe users directories:

@smallexample
$ ls -l /home/unsafe-users/
drwxrws--- 14 marco-banking marco-banking 4.0K Jul 18 07:41 /home/unsafe-users/marco-banking/
drwxrws--- 24 marco-firefox marco-firefox 4.0K May 23 16:47 /home/unsafe-users/marco-firefox/
@end smallexample

@noindent
and the groups:

@example
$ groups
marco ... mmux-safe-usrs marco-firefox marco-banking
@end example

If @samp{marco} wants to remove an unsafe user account, @strong{including the unsafe user's home
directory}, he can do:

@example
@value{MANAGER_SCRIPT} del marco-banking -Smarco
@end example

@noindent
and delete the corresponding entry from @value{UNSAFE_USERS_DOTFILE}.

To run programs under an unsafe user account, @code{marco} can do:

@example
$ sudo -u marco-firefox -H /opt/firefox/32.0.3/firefox
@end example

@noindent
or, even better, prepare a shell script holding something like:

@example
(set -x
  cd ~marco-firefox
  umask 0007
  sudo -u marco-firefox -H \
    /opt/firefox/32.0.3/firefox "$@@" \
    &>~marco-firefox/.FIREFOX-errors &)
@end example

@c page
@node tips
@chapter Useful stuff to know


While setting up applications to run under the unsafe user, we should remember the following:

@itemize
@item
Prepare fonts configuration with @code{fontconfig}.  We must install in the unsafe user's home
directory a suitable @file{.fonts.conf} file and build the fonts cache, else applications will not
be able to use the installed fonts.  For example the user @samp{marco} might do:

@example
$ cd ~marco
$ cp .fonts.conf ~marco-firefox/
$ sudo -u marco-firefox /bin/bash
$ cd ~
$ fc-cache -f -v
@end example

@item
About web browsing with Mozilla Firefox: notice that it is possible to setup full installation of
Firefox for a normal user and then copy the whole @file{~/.mozilla} directory to the home directory
of the unsafe user; just remember to change the ownership and access permissions:

@example
$ cp --recursive ~marco/.mozilla ~marco-firefox/
$ sudo chown marco-firefox ~marco-firefox/.mozilla --recursive
$ sudo chgrp marco-firefox ~marco-firefox/.mozilla --recursive
$ sudo chmod g=u,o-rwx ~marco-firefox/.mozilla --recursive
@end example
@end itemize

@c page
@node script
@chapter The command line utility that does it all


Unsafe users are managed with the @value{MANAGER_SCRIPT_COMMAND} command line utility; it should be
installed under @file{/sbin} or @file{/usr/sbin}.  Each user must prepare a list of unsafe users
associated to a safe user account in the file @value{UNSAFE_USERS_DOTFILE}, one unsafe user name for
each line.

Synopsis:

@example
@value{MANAGER_SCRIPT} [action] [options]
@end example

Action commands:

@table @code
@item add UNSAFE-USERNAME --safe-user=SAFE-USERNAME [options]
Add an unsafe user associated to the selected safe user.

@item del UNSAFE-USERNAME --safe-user=SAFE-USERNAME [options]
Delete an unsafe user associated to the selected safe user.

@item enable-x [options]
Enable unsafe users running X applications in a safe user X server.

@item disable-x [options]
Disable unsafe users running X applications in a safe user X server.

@item normalise [options]
Scan the home directories of the unsafe users associated to a user and fix the files ownership and
access permissions.  @ref{normalisation, Directories normalisation}.

@item help [options]
Help the user of this script.
@end table

Options:

@table @code
@item -S@var{SAFE-USERNAME}
@itemx --safe-user=@var{SAFE-USERNAME}
Select the safe user associated to the unsafe user.

@item -H@var{UNSAFE_HOME_PARENT}
@itemx --unsafe-home-parent=@var{UNSAFE_HOME_PARENT}
Available for the action @code{add}.  Select a parent directory for the unsafe users home
directories.  Defaults to @file{/home/unsafe-users}.
@end table

@c page
@node normalisation
@chapter Directories normalisation


Using the action @code{normalise} of the script, we can scan the home directories of all the unsafe
users associated to a specific safe user and fix files ownership and access permissions.  The
normalisation operation works as follows:

@itemize
@item

@end itemize

@c page
@node model
@chapter How unsafe users are associated to safe ones


This chapter examines how the unsafe user accounts are created, deleted and managed by the command
line utility @value{MANAGER_SCRIPT_COMMAND}.

@menu
* model permissions::           Restricting usage of this package.
* model creation::              How to add an unsafe user account.
* model deletion::              How to delete an unsafe user account.
* model xhost::                 Enabling and disabling running X
                                applications.
@end menu

@c page
@node model permissions
@section Restricting usage of this package


The distribution comes with a script @file{meta/slackware/doinst.sh} that can be run to create the
users' groups and adjust the access permissions of the installed files.  It is usable, in fact, as
Slackware package installation script.

This package relies on the existence of two user groups:

@table @asis
@item @code{mmux-safe-usrs}
It is the group to which all, and only, the safe users allowed to use this package should belong to.
This group can be added automatically by running the script @file{doinst.sh}.  This package does
@strong{not} add users to this group: it is responsibility of the system administrator to do it.

By default, the installed @file{sudoers.d} file requires users to belong to the group
@code{mmux-safe-usrs} to be able to run the script @value{MANAGER_SCRIPT_COMMAND}.

@item @code{mmux-unsafe-usrs}
It is the group to which all the safe and unsafe users should belong to.  This group can be added
automatically by running the script @file{doinst.sh}.  This package: automatically adds unsafe users
to this group at user--creation time; automatically removes unsafe users from this group at
user--deletion time.  This package does @strong{not} add safe users to this group: it is
responsibility of the system administrator to do it.

This group of unsafe users can be used to configure file systems' quota and to restrict access to
files.
@end table

All the scripts in this package should be installed with owner @samp{root}, group
@code{mmux-safe-usrs} and permissions @samp{0750}; after package installation, these permissions can
be adjusted by running the @file{doinst.sh} script.  We should see something like:

@example
$ ls -l /usr/sbin/mmux-unsafe-users-manager
-rwxr-x--- 1 root mmux-safe-usrs 13K Jan  5  2020 /usr/sbin/mmux-unsafe-users-manager
@end example

@c page
@node model creation
@section How to add an unsafe user account


The root directory of the unsafe user's home directory is created with:

@example
$SUDO /usr/bin/install -m 0750 -o root -g mmux-unsafe-usrs -d /home/unsafe-users
@end example

Let's take as example the unsafe user @samp{marco-firefox} associated to the safe user @samp{marco};
unsafe users accounts are created with the command:

@example
$SUDO /usr/sbin/useradd \
   --base-dir     /home/unsafe-users                    \
   --home         /home/unsafe-users/marco-firefox      \
   --create-home                                        \
   --user-group                                         \
   --groups       mmux-unsafe-usrs,audio,video          \
   --shell        /bin/false                            \
   marco-firefox
@end example

@noindent
notice that an unsafe user's account @strong{must not} be part of the normal users' groups (like
@samp{users}); rather it should be part of the smallest possible number of groups needed to run the
desired applications.

The shell could be either @file{/bin/false} or @file{/sbin/nologin}; we opt for the former because
it is more descriptive of a user account never available for log in (@file{/sbin/nologin} is more
for temporarily disabled accounts).

The access permissions of the unsafe user's home directory are modified as follows:

@example
$SUDO /bin/chmod 2770 /home/unsafe-users/marco-firefox
@end example

@noindent
the directory is setgid, so all the files created in it are automatically set to the group of the
unsafe user.

The safe user is added to the group of the unsafe user:

@example
$SUDO /usr/sbin/usermod marco --append --groups marco-firefox
@end example

@noindent
this way the safe user can access the files in the home directory of the unsafe user.@footnote{We
have to remember that this group addition will become effective after the safe user has logged out
and logged back in.}

@c page
@node model deletion
@section How to delete an unsafe user account


Let's take as example the unsafe user @samp{marco-firefox} associated to
the safe user @samp{marco}.  The unsafe user account and its home
directory are removed with:

@example
$SUDO /usr/sbin/userdel marco-firefox --remove
@end example

The unsafe user group is removed with:

@example
$SUDO /usr/sbin/groupdel marco-firefox
@end example

@c page
@node model xhost
@section Enabling and disabling running X applications


X Window host access control is enabled with:

@example
/usr/bin/xhost -
@end example

Let's take as example the unsafe user @samp{marco-firefox} associated to
the safe user @samp{marco}.  The unsafe user is allowed to run X
applications under a server owned by the safe user with:

@example
/usr/bin/xhost +local:marco-firefox
@end example

@noindent
and disallowed with:

@example
/usr/bin/xhost -local:marco-firefox
@end example

The allow operation is performed for each unsafe user name listed in the
file @value{UNSAFE_USERS_DOTFILE}.

@c page
@c ------------------------------------------------------------
@c Appendices.
@c ------------------------------------------------------------

@include gpl-3.0.texi
@include fdl-1.3.texi

@c page
@node references
@appendix Bibliography and references


The documentation of @value{PACKAGE} is available online:

@center @value{DOCUMENTATION_URL}

@noindent
the latest version of this package can be downloaded from:

@center @value{GITHUB_URL}

Marco's Bash Functions Library (@mbfl{}) can be found here:

@center @url{http://marcomaggi.github.com/mbfl.html}

@c page
@node concept index
@appendix An entry for each concept

@printindex cp

@contents
@bye

@c end of file

